var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
import { Schema } from 'mongoose';
var createType = function (type) { return function (options) {
    if (options === void 0) { options = {}; }
    return __assign({ required: true }, options, { type: type });
}; };
var createOptionalType = function (type) { return function (options) {
    if (options === void 0) { options = {}; }
    return __assign({}, options, { type: type });
}; };
export var Type = {
    string: createType(String),
    optionalString: createOptionalType(String),
    number: createType(Number),
    optionalNumber: createOptionalType(Number),
    boolean: createType(Boolean),
    optionalBoolean: createOptionalType(Boolean),
    date: createType(Date),
    optionalDate: createOptionalType(Date),
    mixed: createType(Schema.Types.Mixed),
    optionalMixed: createOptionalType(Schema.Types.Mixed),
    objectId: createType(Schema.Types.ObjectId),
    optionalObjectId: createOptionalType(Schema.Types.ObjectId),
    object: function (options) {
        if (options === void 0) { options = {}; }
        return ({
            of: function (schema) {
                return __assign({ required: true }, options, { type: schema });
            },
        });
    },
    optionalObject: function (options) {
        if (options === void 0) { options = {}; }
        return ({
            of: function (schema) {
                return __assign({}, options, { type: schema });
            },
        });
    },
    array: function (options) {
        if (options === void 0) { options = {}; }
        return ({
            of: function (schema) {
                return __assign({ required: true }, options, { type: [schema] });
            },
        });
    },
    optionalArray: function (options) {
        if (options === void 0) { options = {}; }
        return ({
            of: function (schema) {
                return __assign({}, options, { type: [schema] });
            },
        });
    },
    schema: function (options) {
        if (options === void 0) { options = {}; }
        return ({
            of: function (schema) {
                return __assign({ required: true }, options, { type: schema });
            },
        });
    },
    optionalSchema: function (options) {
        if (options === void 0) { options = {}; }
        return ({
            of: function (schema) {
                return __assign({}, options, { type: schema });
            },
        });
    },
    ref: function (schema) { return ({
        to: function (name, refSchema) {
            return __assign({}, schema, { ref: name });
        },
    }); },
};
